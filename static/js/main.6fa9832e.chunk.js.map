{"version":3,"sources":["App.tsx","utils/Dates.tsx","index.tsx"],"names":["Container","styled","div","MainTitleContainer","MainTitle","h1","Copyright","p","ImageTitle","h2","DatePickerStyled","DatePicker","ImageContainer","Image","img","ErrorMessage","h3","useState","dataGetted","setDataGetted","error","setError","Date","startDate","setStartDate","dateFormatted","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","formatDate","fetchData","a","fetch","response","json","data","useEffect","code","selected","onChange","msg","title","undefined","url","includes","width","height","src","explanation","copyright","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"2RAMMA,EAAYC,IAAOC,IAAV,sJAQTC,EAAqBF,IAAOC,IAAV,sEAIlBE,EAAYH,IAAOI,GAAV,6GAKTC,EAAYL,IAAOM,EAAV,gKAQTC,EAAaP,IAAOQ,GAAV,6GAMVC,EAAmBT,YAAOU,IAAPV,CAAH,+PAYhBW,EAAiBX,IAAOC,IAAV,0KAUdW,EAAQZ,IAAOa,IAAV,mDAILC,EAAed,IAAOe,GAAV,gHAOH,aAAO,IAAD,EA2B8C,EA3B9C,EACiBC,mBAAc,IAD/B,mBACZC,EADY,KACAC,EADA,OAEOF,oBAAS,GAFhB,mBAEZG,EAFY,KAELC,EAFK,OAGeJ,mBAChC,IAAIK,MAJa,mBAGZC,EAHY,KAGDC,EAHC,KAObC,EC7EkB,SAACC,GACzB,IAAIC,EAAI,IAAIL,KAAKI,GACfE,EAAQ,IAAMD,EAAEE,WAAa,GAC7BC,EAAM,GAAKH,EAAEI,UACbC,EAAOL,EAAEM,cAKX,OAHIL,EAAMM,OAAS,IAAGN,EAAQ,IAAMA,GAChCE,EAAII,OAAS,IAAGJ,EAAM,IAAMA,GAEzB,CAACE,EAAMJ,EAAOE,GAAKK,KAAK,KDoETC,CAAU,OAACb,QAAD,IAACA,IAAa,IAAID,MAI5Ce,EAAS,uCAAG,8BAAAC,EAAA,+EAESC,MAAM,GAAD,OAJhB,uBAIgB,gCACQd,EADR,YALR,qDAGN,cAERe,EAFQ,gBAKKA,EAASC,OALd,OAKRC,EALQ,OAMdvB,EAAcuB,GANA,kDAQdrB,GAAS,GARK,0DAAH,qDAgBf,OAJAsB,qBAAU,WACRN,MACC,CAACZ,IAEoB,MAApBP,EAAW0B,MAAoC,MAApB1B,EAAW0B,MAAgBxB,EAEtD,eAACpB,EAAD,WACE,eAACG,EAAD,WACE,cAACC,EAAD,uCACA,cAACM,EAAD,CACEmC,SAAUtB,EACVuB,SAAU,SAACpB,GAAD,OAAgBF,EAAaE,SAG3C,cAACX,EAAD,oBACGG,EAAW6B,WADd,QACqB,4CAOzB,eAAC/C,EAAD,WACE,eAACG,EAAD,WACE,cAACC,EAAD,uCACA,cAACM,EAAD,CACEmC,SAAUtB,EACVuB,SAAU,SAACpB,GAAD,OAAgBF,EAAaE,SAG3C,cAAClB,EAAD,UAAaU,EAAW8B,QACxB,eAACpC,EAAD,gBACsBqC,IAAnB/B,EAAWgC,KAAqBhC,EAAWgC,IAAIC,SAAS,WACvD,wBAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAKpC,EAAWgC,MAEjD,cAACrC,EAAD,CACEmC,MAAO9B,EAAWqC,YAClBH,MAAM,OACNC,OAAO,OACPC,IAAG,UAAKpC,EAAWgC,OAGvB,cAAC5C,EAAD,oBAAYY,EAAWsC,iBAAvB,QAAoC,qBElI5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.6fa9832e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport styled from \"styled-components\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { formatDate } from \"./utils/Dates\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  margin: 0 auto;\n`;\n\nconst MainTitleContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst MainTitle = styled.h1`\n  font-family: \"Syne Mono\", monospace;\n  color: white;\n  align-items: center;\n`;\nconst Copyright = styled.p`\n  font-family: 'Roboto Mono', monospace;\n  display: flex;\n  color: white;\n  padding 10px 20px;\n  border-top:1px solid #add8e6;\n`;\n\nconst ImageTitle = styled.h2`\n  font-family: \"Roboto Mono\", monospace;\n  color: #add8e6;\n  font-size: 27px;\n`;\n\nconst DatePickerStyled = styled(DatePicker)`\n  font-family: \"Syne Mono\", monospace;\n  border-radius: 10px;\n  font-size: 20px;\n  text-align: center;\n  padding: 5px 10px 5px 10px;\n  box-sizing: content-box;\n  width: 120px;\n  margin-left: 10px;\n  font-weight: bold;\n`;\n\nconst ImageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  width: 80%;\n  height: 80%;\n`;\n\nconst Image = styled.img`\n  border-radius: 5px;\n`;\n\nconst ErrorMessage = styled.h3`\n  border: 1px solid red;\n  color: white;\n  padding: 20px;\n  border-radius: 5px;\n`;\n\nexport default () => {\n  const [dataGetted, setDataGetted] = useState<any>({});\n  const [error, setError] = useState(false);\n  const [startDate, setStartDate] = useState<Date | null | undefined>(\n    new Date()\n  );\n\n  const dateFormatted = formatDate(startDate ?? new Date());\n  const API_KEY: string = \"api_key=J9c8DvGBTzcqvhFd8UPQIJqhzJ80Ractk3JBOiRx\";\n  const baseUrl = \"https://api.nasa.gov\";\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\n        `${baseUrl}/planetary/apod?date=${dateFormatted}&${API_KEY}`\n      );\n      const data = await response.json();\n      setDataGetted(data);\n    } catch {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [dateFormatted]);\n\n  if (dataGetted.code === 400 || dataGetted.code === 404 || error) {\n    return (\n      <Container>\n        <MainTitleContainer>\n          <MainTitle>Astronomy Picture of the</MainTitle>\n          <DatePickerStyled\n            selected={startDate}\n            onChange={(date: Date) => setStartDate(date)}\n          />\n        </MainTitleContainer>\n        <ErrorMessage>\n          {dataGetted.msg ?? \"We have a error, please refresh page\"}\n        </ErrorMessage>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <MainTitleContainer>\n        <MainTitle>Astronomy Picture of the</MainTitle>\n        <DatePickerStyled\n          selected={startDate}\n          onChange={(date: Date) => setStartDate(date)}\n        />\n      </MainTitleContainer>\n      <ImageTitle>{dataGetted.title}</ImageTitle>\n      <ImageContainer>\n        {dataGetted.url !== undefined && dataGetted.url.includes(\"youtube\") ? (\n          <iframe width=\"420\" height=\"315\" src={dataGetted.url}></iframe>\n        ) : (\n          <Image\n            title={dataGetted.explanation}\n            width=\"100%\"\n            height=\"100%\"\n            src={`${dataGetted.url}`}\n          />\n        )}\n        <Copyright>{dataGetted.copyright ?? \"Anonymous\"}</Copyright>\n      </ImageContainer>\n    </Container>\n  );\n};\nfunction useWindowDimensions(): { height: any; width: any } {\n  throw new Error(\"Function not implemented.\");\n}\n","export const formatDate = (date: Date) => {\n  var d = new Date(date),\n    month = \"\" + (d.getMonth() + 1),\n    day = \"\" + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = \"0\" + month;\n  if (day.length < 2) day = \"0\" + day;\n\n  return [year, month, day].join(\"-\");\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}